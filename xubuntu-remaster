#!/bin/bash

#*******************************************************************************
#*                               xubuntu-remaster                              *
#*-----------------------------------------------------------------------------*
#* based on https://github.com/covertsh/ubuntu-autoinstall-generator           *
#*                                                                             *
#* Copyright (c) 2022 Ivan Danov                                               *
#*                                                                             *
#* MIT License                                                                 *
#*                                                                             *
#* Permission is hereby granted, free of charge, to any person obtaining a     *
#* copy of this software and associated documentation files (the "Software"),  *
#* to deal in the Software without restriction, including without limitation   *
#* the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
#* and/or sell copies of the Software, and to permit persons to whom the       *
#* Software is furnished to do so, subject to the following conditions:        *
#*                                                                             *
#* The above copyright notice and this permission notice shall be included     *
#* in all copies or substantial portions of the Software.                      *
#*                                                                             *
#* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS     *
#* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *
#* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
#* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
#* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
#* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
#* DEALINGS IN THE SOFTWARE.                                                   *
#*******************************************************************************

set -Eeuo pipefail

XUBUNTU_REMASTER_BASE_VERSION="1.0"
XUBUNTU_REMASTER_VERSION=development

SCRIPT_SELF="$(realpath "${BASH_SOURCE[0]}")"
# shellcheck disable=SC2034 # appears unused
SCRIPT_DIR=$(dirname "${SCRIPT_SELF}")
SCRIPT_FILE=$(basename "${SCRIPT_SELF}")
SCRIPT_NAME=$(basename -s .bash "$(basename -s .sh "${SCRIPT_FILE}")")

function log() {
	echo >&2 -e "[$(date +"%Y-%m-%d %H:%M:%S")] ${1-}"
}
function die() {
	local msg=$1
	local code=${2-1} # Bash parameter expansion - default exit status 1. See https://wiki.bash-hackers.org/syntax/pe#use_a_default_value
	log "$msg"
	if [ "$code" -ne 0 ]; then
		log "üí• Error!"
	fi
	exit "$code"
}

if [ "${XUBUNTU_REMASTER_VERSION}" == "development" ]; then
	# get from git
	pushd "${SCRIPT_DIR}" >/dev/null 2>&1
	GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
	if [ -n "${GIT_BRANCH}" ]; then
		GIT_REV_COUNT=$(git rev-list --count "${GIT_BRANCH}" 2>/dev/null)
		GIT_REV=$(git rev-parse --verify HEAD --short 2>/dev/null || true)
		XUBUNTU_REMASTER_VERSION="${XUBUNTU_REMASTER_BASE_VERSION}.${GIT_REV_COUNT}+${GIT_REV}"
	else
		XUBUNTU_REMASTER_VERSION="${XUBUNTU_REMASTER_BASE_VERSION}.${XUBUNTU_REMASTER_VERSION}"
	fi
	unset GIT_REV
	unset GIT_REV_COUNT
	unset GIT_BRANCH
	popd >/dev/null 2>&1
fi

log "üë∂ ${SCRIPT_NAME} ${XUBUNTU_REMASTER_VERSION} Starting up..."

argc=$#
if [ ${argc} -ne 1 ]; then
	echo "Usage:"
	echo "	${0} <config file, see /usr/share/doc/xubuntu-remaster/examples/luks-encrypted/luks-encrypted.conf>"
	exit 1
fi
CONFIG_FILE=${1}

CONFIG_VARS=(
	PROJECT_VERSION
	OS_VER
	BASE_ISO
	USE_HWE_KERNEL
	PROJECT_NAME
	PROJECT
	PROJECT_DESCRIPTION
	VENDOR_NAME
	LOGO_PNG
	VENDOR_DIR
	INITIAL_LUKS_PASS
	HOST_NAME
	LOCAL_USER
	LOCAL_PASSWORD
	FILESYSTEM_SQUASHFS_SCRIPT
	USER_DATA_FILE
	LATE_COMMANDS_SCRIPT
	FIRST_BOOT_SCRIPT
)

# clear config vars
for i in "${CONFIG_VARS[@]}"; do
	unset "${i}"
done

# shellcheck source=/dev/null
source "${CONFIG_FILE}"

ifIsSet() {
	[[ ${!1-x} == x ]] && return 1 || return 0
}
ifNotSet() {
	[[ ${!1-x} == x ]] && return 0 || return 1
}

# check required params and arguments
ifNotSet PROJECT_VERSION && die "üí• PROJECT_VERSION was not defined."
ifNotSet OS_VER && die "üí• OS_VER was not defined."
ifNotSet BASE_ISO && die "üí• BASE_ISO was not defined."
ifNotSet USE_HWE_KERNEL && die "üí• USE_HWE_KERNEL was not defined."
ifNotSet PROJECT_NAME && die "üí• PROJECT_NAME was not defined."
ifNotSet PROJECT && die "üí• PROJECT was not defined."
ifNotSet VENDOR_NAME && die "üí• VENDOR_NAME was not defined."
ifIsSet LOGO_PNG && [[ ! -f "${LOGO_PNG}" ]] && die "üí• LOGO_PNG file '${LOGO_PNG}' could not be found."
ifNotSet VENDOR_DIR && die "üí• VENDOR_DIR was not defined."
ifNotSet HOST_NAME && die "üí• HOST_NAME was not defined."
ifNotSet LOCAL_USER && die "üí• LOCAL_USER was not defined."
ifNotSet LOCAL_PASSWORD && die "üí• LOCAL_PASSWORD was not defined."
ifIsSet EXTRA_DIR && [[ ! -d "${EXTRA_DIR}" ]] && die "üí• EXTRA_DIR dir '${EXTRA_DIR}' could not be found."
ifIsSet SQUASHFS_EXTRA_DIR && [[ ! -d "${SQUASHFS_EXTRA_DIR}" ]] && die "üí• SQUASHFS_EXTRA_DIR dir '${SQUASHFS_EXTRA_DIR}' could not be found."

XSUDO=
if ifIsSet FILESYSTEM_SQUASHFS_SCRIPT; then
	[[ ! -f "${FILESYSTEM_SQUASHFS_SCRIPT}" ]] && die "üí• FILESYSTEM_SQUASHFS_SCRIPT file '${FILESYSTEM_SQUASHFS_SCRIPT}' could not be found."
	XSUDO=sudo
fi

ifNotSet USER_DATA_FILE && die "üí• USER_DATA_FILE file was not specified."
[[ ! -f "${USER_DATA_FILE}" ]] && die "üí• user-data file '${USER_DATA_FILE}' could not be found."

ifIsSet LATE_COMMANDS_SCRIPT && [[ ! -f "${LATE_COMMANDS_SCRIPT}" ]] && die "üí• LATE_COMMANDS_SCRIPT file '${LATE_COMMANDS_SCRIPT}' could not be found."
ifIsSet FIRST_BOOT_SCRIPT && [[ ! -f "${FIRST_BOOT_SCRIPT}" ]] && die "üí• FIRST_BOOT_SCRIPT file '${FIRST_BOOT_SCRIPT}' could not be found."

if ifNotSet GRUB_TIMEOUT; then
	GRUB_TIMEOUT=-1 # wait indefinitely
fi

INPUT_ISO="${BASE_ISO}"
if [ ! -f "${INPUT_ISO}" ]; then
	if [ $EUID -eq 0 ] && [ -f "/root/binary/linux/${BASE_ISO}" ]; then
		INPUT_ISO="/root/binary/linux/${BASE_ISO}"
	elif [ -f "/home/${USER}/binary/linux/${BASE_ISO}" ]; then
		INPUT_ISO="/home/${USER}/binary/linux/${BASE_ISO}"
	elif ifIsSet SUDO_USER; then
		SUDO_USER_HOME_DIR=$(bash -c "cd ~$(printf %q "${SUDO_USER}") && pwd")
		if [ -f "${SUDO_USER_HOME_DIR}/binary/linux/${BASE_ISO}" ]; then
			INPUT_ISO="${SUDO_USER_HOME_DIR}/binary/linux/${BASE_ISO}"
		fi
	fi
fi
[[ ! -f "${INPUT_ISO}" ]] && die "üí• Source ISO file could not be found (${INPUT_ISO})."

function cleanup() {
	exit_code=$?
	trap - SIGINT SIGTERM ERR EXIT
	if [ -d "${tmpdir}" ]; then
		rm -rf "$tmpdir"
		log "üöΩ Deleted temporary working directory $tmpdir"
	fi
	if ifIsSet fstmpdir && [ -d "${fstmpdir}" ]; then
		${XSUDO} rm -rf "$fstmpdir"
		log "üöΩ Deleted temporary working directory $fstmpdir"
	fi
	log "üöΩ cleanup"
	if [ $exit_code -ne 0 ]; then
		log "üí• Error!"
	fi
}

trap cleanup SIGINT SIGTERM ERR EXIT

if ifNotSet OUTPUT_DIR; then
	OUTPUT_DIR=.
fi

OUTPUT_ISO="${OUTPUT_DIR}/${PROJECT}-${PROJECT_VERSION}-${OS_VER}-amd64.iso"

tmpdir=$(mktemp -d -p ${OUTPUT_DIR})
if [[ ! "$tmpdir" || ! -d "$tmpdir" ]]; then
	die "üí• Could not create temporary working directory."
else
	mkdir -p "${tmpdir}/image"
	log "üìÅ Created temporary working directory $tmpdir"
fi

log "üîé Checking for required utilities..."
[[ ! -x "$(command -v xorriso)" ]] && die "üí• xorriso is not installed. On Ubuntu, install  the 'xorriso' package."
[[ ! -x "$(command -v sed)" ]] && die "üí• sed is not installed. On Ubuntu, install the 'sed' package."
[[ ! -x "$(command -v curl)" ]] && die "üí• curl is not installed. On Ubuntu, install the 'curl' package."
log "üëç All required utilities are installed."

log "üîß Extracting ISO image '${INPUT_ISO}'..."
xorriso -osirrox on -indev "${INPUT_ISO}" -extract / "$tmpdir/image" &>/dev/null
chmod -R u+w "$tmpdir/image"
rm -rf "$tmpdir/image/"'[BOOT]'
log "üëç Extracted to $tmpdir/image"

if [ -f "$tmpdir/image/isolinux/txt.cfg" ]; then
	[[ ! -f "/usr/lib/ISOLINUX/isohdpfx.bin" ]] && die "üí• isolinux is not installed. On Ubuntu, install the 'isolinux' package."
fi

efi_start=$(fdisk -o Start,Type -l "${INPUT_ISO}" | grep -oP '\d+(?=\s+EFI)' || true)
if [ -n "${efi_start}" ]; then
	log "üîß Extracting EFI images from ISO image..."
	efi_length=$(fdisk -o Sectors,Type -l "${INPUT_ISO}" | grep -oP '\d+(?=\s+EFI)' || true)
	dd if="${INPUT_ISO}" bs=512 skip="${efi_start}" count="${efi_length}" of="$tmpdir/efi.img" &>/dev/null
	dd if="${INPUT_ISO}" bs=1 count=432 of="$tmpdir/hybrid.img" &>/dev/null
	log "üëç Extracted EFI images"
fi

if [ "${USE_HWE_KERNEL}" -eq 1 ]; then
	if grep -q "hwe-vmlinuz" "$tmpdir/image/boot/grub/grub.cfg"; then
		log "‚òëÔ∏è Destination ISO will use HWE kernel."
		if [ -f "$tmpdir/image/isolinux/txt.cfg" ]; then
			sed -i -e 's|/casper/vmlinuz|/casper/hwe-vmlinuz|g' "$tmpdir/image/isolinux/txt.cfg"
			sed -i -e 's|/casper/initrd|/casper/hwe-initrd|g' "$tmpdir/image/isolinux/txt.cfg"
		fi
		sed -i -e 's|/casper/vmlinuz|/casper/hwe-vmlinuz|g' "$tmpdir/image/boot/grub/grub.cfg"
		sed -i -e 's|/casper/initrd|/casper/hwe-initrd|g' "$tmpdir/image/boot/grub/grub.cfg"
		sed -i -e 's|/casper/vmlinuz|/casper/hwe-vmlinuz|g' "$tmpdir/image/boot/grub/loopback.cfg"
		sed -i -e 's|/casper/initrd|/casper/hwe-initrd|g' "$tmpdir/image/boot/grub/loopback.cfg"
	else
		log "‚ö†Ô∏è This source ISO does not support the HWE kernel. Proceeding with the regular kernel."
	fi
fi

log "üß© Adding autoinstall parameter to kernel command line..."
if [ -f "$tmpdir/image/isolinux/txt.cfg" ]; then
	sed -i -e 's/---/ autoinstall  ---/g' "$tmpdir/image/isolinux/txt.cfg"
fi
sed -i -e 's/---/ autoinstall  ---/g' "$tmpdir/image/boot/grub/grub.cfg"
sed -i -e 's/---/ autoinstall  ---/g' "$tmpdir/image/boot/grub/loopback.cfg"

if [ -f "$tmpdir/image/isolinux/txt.cfg" ]; then
	sed -i -e 's/Install Ubuntu Server/'"${PROJECT_NAME}"'/g' "$tmpdir/image/isolinux/txt.cfg"
fi

# 20.04
sed -i -e 's/menuentry "Install Ubuntu Server"/menuentry "'"${PROJECT_NAME}"'"/g' "$tmpdir/image/boot/grub/grub.cfg"
sed -i -e 's/menuentry "Install Ubuntu Server"/menuentry "'"${PROJECT_NAME}"'"/g' "$tmpdir/image/boot/grub/loopback.cfg"

# 22.04-beta
sed -i -e 's/menuentry "Ubuntu Server"/menuentry "'"${PROJECT_NAME}"'"/g' "$tmpdir/image/boot/grub/grub.cfg"
sed -i -e 's/menuentry "Ubuntu Server"/menuentry "'"${PROJECT_NAME}"'"/g' "$tmpdir/image/boot/grub/loopback.cfg"

# 22.04
sed -i -e 's/menuentry "Try or Install Ubuntu Server"/menuentry "'"${PROJECT_NAME}"'"/g' "$tmpdir/image/boot/grub/grub.cfg"
sed -i -e 's/menuentry "Try or Install Ubuntu Server"/menuentry "'"${PROJECT_NAME}"'"/g' "$tmpdir/image/boot/grub/loopback.cfg"

sed -i -e 's/^set timeout=.*/set timeout='"${GRUB_TIMEOUT}"'/g' "$tmpdir/image/boot/grub/grub.cfg"

log "üëç Added parameter to UEFI and BIOS kernel command lines."

log "üß© Adding user-data and meta-data files..."
mkdir "$tmpdir/image/${VENDOR_DIR}"
cp "${USER_DATA_FILE}" "$tmpdir/image/${VENDOR_DIR}/user-data"
# shellcheck disable=SC2016
sed -i 's/\${VENDOR_DIR}/'"${VENDOR_DIR}"'/g' "$tmpdir/image/${VENDOR_DIR}/user-data"
# shellcheck disable=SC2016
sed -i 's/\${LOCAL_USER}/'"${LOCAL_USER}"'/g' "$tmpdir/image/${VENDOR_DIR}/user-data"
# shellcheck disable=SC2016
sed -i 's/\${LOCAL_PASSWORD}/'"${LOCAL_PASSWORD}"'/g' "$tmpdir/image/${VENDOR_DIR}/user-data"
# shellcheck disable=SC2016
sed -i 's/\${HOST_NAME}/'"${HOST_NAME}"'/g' "$tmpdir/image/${VENDOR_DIR}/user-data"

touch "$tmpdir/image/${VENDOR_DIR}/meta-data"
if [ -f "$tmpdir/image/isolinux/txt.cfg" ]; then
	sed -i -e 's,---, ds=nocloud;s=/cdrom/'"${VENDOR_DIR}"'/  ---,g' "$tmpdir/image/isolinux/txt.cfg"
fi
sed -i -e 's,---, ds=nocloud\\\;s=/cdrom/'"${VENDOR_DIR}"'/  ---,g' "$tmpdir/image/boot/grub/grub.cfg"
sed -i -e 's,---, ds=nocloud\\\;s=/cdrom/'"${VENDOR_DIR}"'/  ---,g' "$tmpdir/image/boot/grub/loopback.cfg"
log "üëç Added data and configured kernel command line."
if [ "$(grep -c 'Ubuntu-Server' "$tmpdir/image/.disk/info")" -ne 0 ]; then
	# for 22.04
	# NOTE: must start with ubuntu-server
	# first word is live session user name
	sed -i 's/^Ubuntu-Server/Ubuntu-Server '"${PROJECT_DESCRIPTION}"' '"${PROJECT_VERSION}"'/g' "$tmpdir/image/.disk/info"
else
	# for 20.04
	sed -i 's/^Ubuntu/'"${PROJECT_DESCRIPTION}"' '"${PROJECT_VERSION}"' on Ubuntu/g' "$tmpdir/image/.disk/info"
fi
log "üëç Disk info file changed"

# iso squashfs re-packaging
if ifIsSet FILESYSTEM_SQUASHFS_SCRIPT; then

	log "üß© Repackaging squashfs filesystem..."

	# check for known files
	if [ -f "$tmpdir/image/casper/filesystem.squashfs" ]; then
		FSNAME=filesystem
	elif [ -f "$tmpdir/image/casper/ubuntu-server-minimal.squashfs" ]; then
		FSNAME=ubuntu-server-minimal
	else
		die "üí• Could not detect squashfs filesystem."
	fi

	fstmpdir=$(mktemp -d -p "${OUTPUT_DIR}")
	if [[ ! "$fstmpdir" || ! -d "$fstmpdir" ]]; then
		die "üí• Could not create temporary working directory."
	else
		log "üìÅ Created temporary working directory $fstmpdir"
	fi

	mkdir -p "$(dirname "${fstmpdir}")"
	rm -rf "${fstmpdir}"
	log "üß© Extract ${FSNAME}.squashfs to ${fstmpdir}..."
	${XSUDO} unsquashfs -n -user-xattrs -dest "${fstmpdir}" "$tmpdir/image/casper/${FSNAME}.squashfs" &>/dev/null
	log "üëç ${FSNAME}.squashfs extracted to ${fstmpdir}..."

	log "üß© Copy user script to ${fstmpdir}..."
	${XSUDO} cp "${FILESYSTEM_SQUASHFS_SCRIPT}" "${fstmpdir}/xubuntu-filesystem-install.sh"
	${XSUDO} chmod 0755 "${fstmpdir}/xubuntu-filesystem-install.sh"
	log "üëç User script copied"

	if ifIsSet SQUASHFS_EXTRA_DIR; then
		log "üß© Copy user data to ${fstmpdir}..."
		${XSUDO} cp -a "${SQUASHFS_EXTRA_DIR}" "${fstmpdir}/extra_files"
		log "üëç User data copied"
	fi

	log "üß© Exec custom script ${FILESYSTEM_SQUASHFS_SCRIPT}..."
	log "üß© See log in ${OUTPUT_DIR}/custom_script.log"
	${XSUDO} systemd-nspawn --quiet --notify-ready=yes --register=yes \
		--bind-ro=/etc/resolv.conf --hostname=xubuntu-remaster \
		--directory="${fstmpdir}" /bin/bash /xubuntu-filesystem-install.sh \
		>custom_script.log
	log "üëç Custom script ${FILESYSTEM_SQUASHFS_SCRIPT} done"
	log "üß© Remove log in ${OUTPUT_DIR}/custom_script.log"
	rm ${OUTPUT_DIR}/custom_script.log

	log "üß© Create new ${FSNAME}.squashfs from ${fstmpdir}..."
	${XSUDO} rm -f "${fstmpdir}/xubuntu-filesystem-install.sh"

	[[ ! -f "${fstmpdir}/filesystem.manifest" ]] && die "üí• Error creating new ${FSNAME}.squashfs"

	${XSUDO} mv "${fstmpdir}/filesystem.manifest" "$tmpdir/image/casper/${FSNAME}.manifest"
	rm -f "$tmpdir/image/casper/${FSNAME}.squashfs"
	rm -f "$tmpdir/image/casper/${FSNAME}.squashfs.gpg"

	# fast, big
	# mksquashfs "${fstmpdir}" "$tmpdir/image/casper/${FSNAME}.squashfs" -nolzma -e "${fstmpdir}/boot" &>/dev/null

	# fast, big: -nolzma
	# slow, small: -comp xz
	${XSUDO} mksquashfs "${fstmpdir}" \
		"$tmpdir/image/casper/${FSNAME}.squashfs" \
		-noappend                 \
		-comp xz                  \
		-wildcards                \
		-e "boot/*"               \
		-e "boot/.*"              \
		-e "proc/*"               \
		-e "proc/.*"              \
		-e "run/*"                \
		-e "run/.*"               \
		-e "tmp/*"                \
		-e "tmp/.*"               \
		-e "var/crash/*"          \
		-e "var/crash/.*"         \
		-e "swapfile"             \
		-e "root/.bash_history"   \
		-e "root/.cache"          \
		-e "root/.wget-hsts"      \
		-e "home/*/.bash_history" \
		-e "home/*/.cache"        \
		-e "home/*/.wget-hsts"    \
		&>/dev/null

	printf "%s" "$(${XSUDO} du -sx --block-size=1 "${fstmpdir}" | cut -f1)" >"$tmpdir/image/casper/${FSNAME}.size"
	log "üëç ${FSNAME}.squashfs repackaged"

	${XSUDO} rm -rf "$fstmpdir"
	log "üöΩ Deleted temporary working directory $fstmpdir"
fi

log "üß© Adding custom files and dirs..."
if ifIsSet LATE_COMMANDS_SCRIPT; then
	cp "${LATE_COMMANDS_SCRIPT}" "$tmpdir/image/${VENDOR_DIR}/late-commands-target.sh"
	chmod 755 "$tmpdir/image/${VENDOR_DIR}/late-commands-target.sh"
fi

if ifIsSet FIRST_BOOT_SCRIPT; then
	cp "${FIRST_BOOT_SCRIPT}" "$tmpdir/image/${VENDOR_DIR}/xubuntu-remaster-first-boot"
	chmod 755 "$tmpdir/image/${VENDOR_DIR}/xubuntu-remaster-first-boot"
fi

cat >"$tmpdir/image/${VENDOR_DIR}/xubuntu-remaster.conf" <<EOF
#!/bin/bash"

# ISO created on $(date +"%Y.%m.%d %T")
# from xubuntu-remaster ${XUBUNTU_REMASTER_VERSION}

EOF

for i in "${CONFIG_VARS[@]}"; do
	if ifIsSet "${i}"; then
		echo "${i}='${!i}'" >>"$tmpdir/image/${VENDOR_DIR}/xubuntu-remaster.conf"
	fi
done

if ifIsSet LOGO_PNG; then
	cp "${LOGO_PNG}" "$tmpdir/image/${VENDOR_DIR}/logo.png"
	cp "${LOGO_PNG}" "$tmpdir/image/boot/grub/logo.png"

	mv "$tmpdir/image/boot/grub/grub.cfg" "$tmpdir/image/boot/grub/grub.cfg.org"
	cat > "$tmpdir/image/boot/grub/grub.cfg" << EOF
function load_video {
  if [ x\$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}
set gfxmode=auto
load_video
insmod gfxterm
terminal_output gfxterm

insmod png
background_image /boot/grub/logo.png

EOF

	cat "$tmpdir/image/boot/grub/grub.cfg.org" >> "$tmpdir/image/boot/grub/grub.cfg"
	rm "$tmpdir/image/boot/grub/grub.cfg.org"
fi
if ifIsSet EXTRA_DIR; then
	shopt -s dotglob
	cp -a "${EXTRA_DIR}"/* "$tmpdir/image/${VENDOR_DIR}"
	shopt -u dotglob
fi

log "üë∑ Updating $tmpdir/image/md5sum.txt with hashes of modified files..."
update_md5() {
	md5=$(md5sum "$tmpdir/image/$1" | cut -f1 -d ' ')
	sed -i -e 's,^.*[[:space:]] '"./$1"','"$md5"'  .'"/$1"',' "$tmpdir/image/md5sum.txt"
}
update_md5 "boot/grub/grub.cfg"
update_md5 "boot/grub/loopback.cfg"
update_md5 ".disk/info"
if ifIsSet FILESYSTEM_SQUASHFS_SCRIPT; then
	update_md5 "casper/${FSNAME}.squashfs"
	update_md5 "casper/${FSNAME}.manifest"
	update_md5 "casper/${FSNAME}.size"
	if [ ! -f "$tmpdir/image/casper/${FSNAME}.squashfs.gpg" ]; then
		sed -i '/.\/casper\/'"${FSNAME}"'.squashfs.gpg/d' "$tmpdir/image/md5sum.txt"
	fi
fi
log "üëç Updated hashes."

ver_sze=${#PROJECT_VERSION}
pd_sze=$((32 - "${ver_sze}" - 1))
pd=${PROJECT_DESCRIPTION:0:${pd_sze}}
ISO_LABEL="${pd} ${PROJECT_VERSION}"

log "üì¶ Repackaging extracted files into an ISO image '${ISO_LABEL}' ..."

if [ -z "${efi_start}" ]; then

	xorriso -as mkisofs -r -V "${ISO_LABEL}" \
		-publisher "${VENDOR_NAME}" \
		-p "${VENDOR_NAME}" \
		-A "${PROJECT_DESCRIPTION}" \
		-sysid "${PROJECT_DESCRIPTION}" \
		-volset "${PROJECT_DESCRIPTION} ${PROJECT_VERSION}" \
		-no-emul-boot -boot-load-size 4 \
		-boot-info-table \
		-input-charset utf-8 -eltorito-alt-boot \
		-no-emul-boot -isohybrid-gpt-basdat -isohybrid-apm-hfsplus \
		-J -b isolinux/isolinux.bin -c isolinux/boot.cat \
		-isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
		-e boot/grub/efi.img \
		-o "${OUTPUT_ISO}" "$tmpdir/image" &>/dev/null
else

	if [ -f "$tmpdir/image/boot/grub/i386-pc/eltorito.img" ]; then
		BOOTFILE=boot/grub/i386-pc/eltorito.img
	else
		BOOTFILE=isolinux/isolinux.bin
	fi
	BOOTCAT=boot.catalog

	# Copyright File id: -copyright file (37 chars)
	# Abstract File id: -abstract file (37 chars)
	# Bibliographic File id: -biblio file (37 chars)

	xorriso -as mkisofs -r -V "${ISO_LABEL}" \
		-publisher "${VENDOR_NAME}" \
		-p "${VENDOR_NAME}" \
		-A "${PROJECT_DESCRIPTION}" \
		-sysid "${PROJECT_DESCRIPTION}" \
		-volset "${PROJECT_DESCRIPTION} ${PROJECT_VERSION}" \
		-J -joliet-long -l \
		-iso-level 3 \
		-partition_offset 16 \
		--grub2-mbr "${tmpdir}/hybrid.img" \
		--mbr-force-bootable \
		-append_partition 2 0xEF "${tmpdir}/efi.img" \
		-appended_part_as_gpt \
		-c ${BOOTCAT} \
		-b ${BOOTFILE} \
		-no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info \
		-eltorito-alt-boot \
		-e '--interval:appended_partition_2:all::' \
		-no-emul-boot \
		-o "${OUTPUT_ISO}" "$tmpdir/image" &>/dev/null
fi

log "üëç Repackaged into '${OUTPUT_ISO}'"
die "‚úÖ Completed." 0
